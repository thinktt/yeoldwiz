
/**
 * Game subscribes to gameId events and handles them posting moves
 * generated by player object that must implement two methods:
 * 
 * getNextMove(array of uciMoves) returns uciMove
 * getReply(chat event) returns chat message  
 * 
 */

const chalk = require('chalk')
const personalites = require('./personalities')


class Game {

  /**
   * Initialise with interface to lichess.
   */
  constructor(api, name, player) {
    this.api = api;
    this.name = name;
    this.player = player;
  }

  async start(gameId) {
    this.gameId = gameId
    this.willAcceptDraw = false
    this.api.streamGame(gameId, (event) => this.handler(event));
    this.isMoving = false
    this.isAcceptingDraws = false
    this.hasDrawOffer = false
  }

  async handler(event) {
    console.log(chalk.yellow(event.type))
    let isDraw = false
    switch (event.type) {
      case "gameFinish":
        console.log('Game has completed')
        break;
      case "chatLine":
        this.handleChatLine(event)
        break;
      case "gameFull":
        await this.setupGame(event)
        this.handleGameState(event.state)
        break;
      case "gameState":
        this.handleGameState(event)
        break;
      default:
        console.log("Unhandled game event : " + JSON.stringify(event));
    }
  }

  async setupGame(event) {
    console.log(event)
    this.color = this.playingAs(event)
    this.rated = event.rated
    await this.findAndSetWizPlayer()
  }

  async handleGameState(gameState) {
    if (gameState.status === 'draw') return
    console.log(gameState)
    // If this is a rated game use the standar personality for now
    // if (gameState.rated && !this.wizPlayer) this.setWizPlayer('JW7')

    console.log('is moving:', this.isMoving)
    if(!this.isMoving) {
      this.isMoving = true
      await this.playNextMove(gameState)
      this.isMoving = false
    }
   }

  handleChatLine(event) {

    if (event.username === 'lichess' && event.text.includes('offers draw')) {
      console.log('A draw was requested')
      this.hasDrawOffer = true
      
      console.log('Chatline draw checking')
      console.log('hasDrawOffer:', this.hasDrawOffer)
      console.log('willAcceptDraw:', this.willAcceptDraw)
      console.log('isMoving:', this.isMoving)
      if (this.hasDrawOffer && this.willAcceptDraw && !this.isMoving)  {
          this.api.acceptDraw(this.gameId)
        return
      }
    }

    if (event.username === 'lichess' && event.text.includes('declines draw')) {
      console.log('Draw was delcined')
      this.hasDrawOffer = false
    }
    


    if (event.username !== this.name) {
      const message = event.text.toLowerCase()
      if (this.wizPlayer == '') {
        // let opponent = message.replace('play ', '').replace('as ', '').trim()
        const cmp = personalites.fuzzySearch(message)
        if ( !cmp ) {
          this.api.chat(this.gameId, 'player', "Sorry, I don't know that opponent");
          return
        }

        this.wizPlayer = personalites.getProperName(cmp.name)
        this.api.chat(this.gameId,'player', 
          `Playing as ${this.wizPlayer}. Wiz Rating ${cmp.rating}. ${cmp.summary}`
        );
        this.api.chat(this.gameId, 'spectator', `Playing as ${this.wizPlayer}`);
        this.playNextMove(this.previousMoves)
      }
    }
  }

  async findAndSetWizPlayer() {
    let chatPlayer = await this.getWizPlayerFromChat()
    
    // If no opponent has been set in chat and this is a rated game set
    // the game to play as Josh7
    if ((chatPlayer === '' || chatPlayer === 'should ask who to play') &&  this.rated) {
      this.setWizPlayer('Capablanca')
      return
    }

    // chatPlayer = 'Logan'

    
    // This means chat has no messages at all so we should ask who the player wants to play
    if (chatPlayer === 'should ask who to play' && !this.rated) {
      this.api.chat(
        this.gameId, 
        'player', 'Who would you like to play? Give me a name or a rating number from 1 to 2750.'
      );
      this.api.chat(this.gameId, 'spectator', 'Waiting for opponent selection');
      // clear this for next if
      chatPlayer = ''
    } 


    // No player found in chat setting wizPlayer, still waiting to be told who to play as
    if (chatPlayer === '') {
      console.log(chalk.red(`No player found for game ${this.gameId}`))
      // probably not necessary but just for safety go ahead and set wizPlayer to empty string
      this.wizPlayer = ''
      return 
    } 
    
    // if gauntlet passed, a player was found in the chat
    this.wizPlayer = chatPlayer
    console.log(chalk.magenta(`Playing ${this.gameId} as ${this.wizPlayer}`))
  }

  setWizPlayer(wizPlayer) {
    this.wizPlayer = wizPlayer
    this.api.chat(this.gameId, 'player', `Playing as ${wizPlayer}`);
    this.api.chat(this.gameId, 'spectator', `Playing as ${wizPlayer}`);
    // this.playNextMove(this.previousMoves)
  }

  // Check the spectator chat (via HTML page) for a Wiz Player setting
  async getWizPlayerFromChat() {
    const gamePage = await this.api.gamePage(this.gameId)
    
    // caputre and count message, if no messages have been sent respond with string
    // to let the system know it should ask who the wants to play
    const wizMessagesRx = /"u":"yowCapablanca","t":".*?"/g
    const wizMessages = gamePage.data.match(wizMessagesRx) || []
    if (wizMessages.length === 0) {
      return 'should ask who to play'
    }
    
    // Next we check for a "Playing as string" if one exist we will capture it
    // and try to parse out the opponent name and return it
    const playingAsRx = /"u":"yowCapablanca","t":"Playing as [A-Za-z0-9\.]*/g
    const opponentData = gamePage.data.match(playingAsRx)
    let opponent = ''
    if (opponentData == null) {
      return ''
    }
    opponent = opponentData[0].replace('"u":"yowCapablanca","t":"Playing as ', '')
    return opponent
  }

  // acceptMutualDraw(gameState) {
  //   console.log(`${this.gameId} is accepting draws:`,this.willAcceptDraw)
  //   const drawWasOffered = Boolean(gameState.wdraw || gameState.bdraw)
  //   console.log('draw was offered:', drawWasOffered)
  //   const isDrawByAgreement = drawWasOffered && this.willAcceptDraw
  //   console.log('isDrawbyAgreement:', isDrawByAgreement)
  //   if (isDrawByAgreement) this.api.acceptDraw(this.gameId)
  //   return isDrawByAgreement
  // }

  async playNextMove(gameState) {
    // cache the moves if we end up not moving right due to missing Wiz Player
    this.previousMoves = gameState.moves
    const previousMoves = gameState.moves
    console.log(previousMoves)
    
    const moves = (previousMoves === "") ? [] : previousMoves.split(" ");

    // if it's not the bots turn then exit
    if (!isTurn(this.color, moves)) return

    const moveData = await this.player.getNextMove(moves, this.wizPlayer, this.gameId);
    console.log(moveData)
    
    // no move was found or move setup was invalid, go about your business
    if (!moveData) return 

    const { move, willAcceptDraw } = moveData
    this.willAcceptDraw = willAcceptDraw
    
    
    console.log('PlayNextMove draw checking')
    console.log('hasDrawOffer:', this.hasDrawOffer)
    console.log('willAcceptDraw:', this.willAcceptDraw)

    if (this.hasDrawOffer && this.willAcceptDraw)  {
      // this will keep susequent events from triggering draw request
      this.willAcceptDraw=false
      await this.api.acceptDraw(this.gameId)
      return
    }
 

    console.log(this.name + " as " + this.color + " to move " + move);
    await this.api.makeMove(this.gameId, move)
  }

  playingAs(event) {
    return (event.white.name === this.name) ? "white" : "black";
  }

  isTurn(color, moves) {
    var parity = moves.length % 2;
    return (color === "white") ? (parity === 0) : (parity === 1);
  }
}

function isTurn(color, moves) {
  var parity = moves.length % 2;
  return (color === "white") ? (parity === 0) : (parity === 1);
}


module.exports = Game;
