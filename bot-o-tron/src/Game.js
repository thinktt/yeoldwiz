/**
 * Game subscribes to gameId events and handles them posting moves
 * generated by player object that must implement two methods:
 * 
 * getNextMove(array of uciMoves) returns uciMove
 * getReply(chat event) returns chat message  
 * 
 */
class Game {

  /**
   * Initialise with interface to lichess.
   */
  constructor(api, name, player) {
    this.api = api;
    this.name = name;
    this.player = player;
  }

  async start(gameId) {
    this.gameId = gameId;
    this.wizPlayer = await this.getWizPlayer()
    this.api.streamGame(gameId, (event) => this.handler(event));
  }

  handleChatLine(event) {
    if (event.username !== this.name) {
      const reply = this.player.getReply(event);
      if (reply) {
        this.api.chat(this.gameId, event.room, reply);
      }
    }
  }

  async getWizPlayer() {
    const gamePage = await this.api.gamePage(this.gameId)
    const re = /"u":"yeoldwiz","t":"playing as [A-Za-z\.]*/g
    const opponentData = gamePage.data.match(re)
    let opponent = ''
    if (opponentData == null) {
      opponent = 'JW7'
    } else {
      opponent = opponentData[0].replace('"u":"yeoldwiz","t":"playing as ', '')
    }
    console.log('Wiz Player: ' + opponent)
    return opponent
  }


  handler(event) {
    switch (event.type) {
      case "chatLine":
        this.handleChatLine(event);
        break;
      case "gameFull":
        this.colour = this.playingAs(event);
        this.playNextMove(event.state.moves);
        break;
      case "gameState":
        this.playNextMove(event.moves);
        break;
      default:
        console.log("Unhandled game event : " + JSON.stringify(event));
    }
  }

  async playNextMove(previousMoves) {
    const moves = (previousMoves === "") ? [] : previousMoves.split(" ");
    if (this.isTurn(this.colour, moves)) {
      const nextMove = await this.player.getNextMove(moves);
      if (nextMove) {
        console.log(this.name + " as " + this.colour + " to move " + nextMove);
        this.api.makeMove(this.gameId, nextMove);
      }
    }
  }

  playingAs(event) {
    return (event.white.name === this.name) ? "white" : "black";
  }

  isTurn(colour, moves) {
    var parity = moves.length % 2;
    return (colour === "white") ? (parity === 0) : (parity === 1);
  }
}

module.exports = Game;
